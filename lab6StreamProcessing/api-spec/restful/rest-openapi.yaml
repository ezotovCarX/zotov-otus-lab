openapi: 3.0.0
info:
  contact:
    email: zotovkem86@gmail.com
  title: Заказы
  version: 0.1.0
tags:
  - name: user
    description: Сервис работы с пользователем
  - name: order
    description: Сервис оформления заказа
  - name: account
    description: Сервис управления счетом
  - name: notification
    description: Сервис нотификаций
paths:
  /users/register:
    post:
      tags:
        - user
      summary: Регистрация пользователя
      description: Регистрация пользователя. После регистрации отправляет письмо на email
      operationId: registerUser
      requestBody:
        $ref: '#/components/requestBodies/User'
      responses:
        '201':
          description: Регистрация прошла успешно
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Неправильный запрос
  '/users/{userId}':
    get:
      tags:
        - user
      summary: Ресурс пользователя по ID
      description: Вернуть данные пользователя
      operationId: getUserById
      parameters:
        - name: userId
          in: path
          description: ID пользователя
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Успешный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Неправильный запрос
        '404':
          description: Такого пользователя нет
  /orders:
    post:
      tags:
        - order
      summary: Создание заказа
      description: Метод создания заказа. Проверяется баланс в аккаунте пользователя и создается заказ
      operationId: createOrder
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                total:
                  type: number
              required:
                - total
            example:
              total: 4200

      responses:
        '201':
          description: Создание заказа успешно
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  total:
                    type: number
              example:
                id: 42
                total: 4200
  /accounts/{accountId}/deposit:
    put:
      tags:
        - account
      summary: Внести деньги на счет пользователя
      operationId: deposit
      parameters:
        - name: accountId
          in: path
          description: ID аккаунта пользователя
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                total:
                  type: number
              required:
                - total
            example:
              total: 4200
      responses:
        200:
          description: Баланс пополнен успешно
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  total:
                    type: number
        404:
          description: Аккаунт не найден

  /accounts/{accountId}/spend:
    put:
      tags:
        - account
      summary: Списать деньги со счета пользователя
      operationId: spend
      parameters:
        - name: accountId
          in: path
          description: ID аккаунта пользователя
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                total:
                  type: number
                succes:
                  type: boolean
              required:
                - total
                - succes
            example:
              total: 4200
              success: true
      responses:
        200:
          description: Запрос на списание обработан
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  total:
                    type: number
        404:
          description: Аккаунт не найден
  /emails:
    get:
      tags:
        - notification
      summary: Получить список отправленных писем
      operationId: getEmails
      responses:
        200:
          description: Успешный запрос
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Email'
  /send_email:
    post:
      tags:
        - notification
      summary: Отослать email на почту
      operationId: sendEmail
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                templateId:
                  type: integer
                context:
                  type: object
              required:
                - email
                - templateId
                - context
            example:
              email: "vasya@pupkin.ru"
              templateId: 42
              context:
                firstName: vasya
                lastName: pupkin
                accauntId: 1001
      responses:
        '202':
          description: Отсылка взята в работу
          content:
            application/json:
              schema:
                type: object
                properties:
                  jobId:
                    type: string
              example:
                jobId: 000123234091234
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        address:
          type: string
      required:
        - username
        - password
        - email
    Email:
      type: object
      properties:
        email:
          type: string
          format: email
        templateId:
          type: integer
        context:
          type: string
      required:
        - email
        - templateId
        - context
  requestBodies:
    User:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
          examples:
            sample-user:
              summary: Обычный пользователь
              value:
                username: johndoe589
                firstName: John
                lastName: Doe
                email: bestjohn@doe.com
                phone: '+71002003040'
                password: 'Jsd28xzd'
                address: 'ул Большая Филевская д 16 кв 19'
      description: User object that needs to be created
      required: true
